{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bahdana/Desktop/react_dec/my-app/src/components/Tree.js\";\nimport React, { PureComponent } from 'react';\nimport { Treebeard } from 'react-treebeard';\nconst data = [];\nexport class Tree extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data\n    };\n    this.onToggle = this.onToggle.bind(this);\n  }\n\n  onToggle(node, toggled) {\n    const {\n      cursor,\n      data\n    } = this.state;\n\n    if (cursor) {\n      this.setState(() => ({\n        cursor,\n        active: true\n      }));\n    }\n\n    node.active = true;\n\n    if (node.children) {\n      node.toggled = toggled;\n    }\n\n    this.setState(() => ({\n      cursor: node,\n      data: Object.assign({}, data)\n    }));\n  }\n\n  async componentDidMount() {\n    const URL = '/api/regions';\n    const response = await fetch(URL); //console.log(response)\n\n    const data = await response.json();\n    console.log(data); // const formatedData = data.sort(this.changeData)\n\n    const formatedData = this.modifyData(data);\n    console.log(formatedData);\n    this.setState({\n      data: formatedData\n    });\n  }\n\n  modifyData(arrayOfObjects) {\n    let data = {\n      //name: 'root',\n      toggled: true,\n      children: [{\n        name: 'Name',\n        toggled: true,\n        children: [{\n          name: 'Name',\n          toggled: true,\n          children: [{\n            name: 'Name',\n            toggled: true\n          }, {\n            name: 'Name',\n            toggled: true\n          }]\n        }]\n      }, {\n        name: 'Name',\n        toggled: true,\n        children: [{\n          name: 'Name'\n        }]\n      }]\n    };\n    data.children[0].name = arrayOfObjects[0].name;\n    data.children[1].name = arrayOfObjects[1].name;\n    data.children[0].children[0].name = arrayOfObjects[2].name;\n    data.children[0].children[0].children[0].name = arrayOfObjects[3].name;\n    data.children[0].children[0].children[1].name = arrayOfObjects[4].name;\n    data.children[1].children[0].name = arrayOfObjects[5].name;\n    return data;\n  }\n\n  render() {\n    const {\n      data\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Treebeard, {\n      data: data,\n      onToggle: this.onToggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 18\n    }, this);\n  }\n\n}\nexport default Tree;\n/* \nconst serverData = [\n        { id: 1, path: '1', name: 'Region A' },\n        { id: 2, path: '2', name: 'Region B' },\n        { id: 3, path: '1.3', name: 'Station 1' },\n        { id: 4, path: '1.3.4', name: 'Section 1' },\n        { id: 5, path: '1.3.5', name: 'Section 2' },\n        { id: 6, path: '2.6', name: 'Station 10' },\n      ];\nconst data = [\n            {name: 'Name 1',\n            children: [\n                {\n                    name: 'Name 2',\n                    children: [\n                        { name: 'Name 3' },\n                        { name: 'Name 4' }\n                    ]\n                }\n            ]\n        },\n        {\n            name: 'Name 5',\n            children: [\n                { name: 'Name 6' }\n            ]\n        }\n    ];\n\n\nfunction changeData (a, b) {\n        if ( a.path < b.path ){\n          return -1;\n        }\n        if ( a.path > b.path ){\n          return 1;\n        }\n        return 0;\n      }\n\n      function reGroupArray(arr, size) {\n   var newArr = []\n   for (var i = 0; i <= Math.ceil(arr.length / size); i++) {\n \n       var j = 0;\n       if (i !== 0) {\n           j = j + size;\n           size = size + size;\n       }\n \n       newArr[i] = arr.slice(j, size);\n \n   }\n \n   return newArr;\n}\nvar formatedData = serverData.sort(changeData)\nconsole.log(formatedData)\n mapedArray = formatedData.map(el => el.path.split(\".\")) \nfor (i=0; i <mapedArray.length; i++) {\nif (mapedArray[i].length == 1) {mapedArray[i].id = \"parent\"}\n  else if (mapedArray[i].length == 2) {mapedArray[i].id = \"child\"}\n  else  {mapedArray[i].id = \"grandchild\"}\n}\nconsole.log( mapedArray)\nconsole.log(serverData.length)\nconsole.log(data.length)  */\n\n/* \n\nfunction modifyData (arrayOfObjects) {\n let data = [\n            {name: 'NAME',\n            children: [\n                {\n                    name: 'NAME',\n                    grandchildren: [\n                        { name: 'NAME' },\n                        { name: 'NAME' }\n                    ]\n                }\n            ]\n        },\n        {\n            name: 'NAME',\n            children: [\n                { name: 'NAME' }\n            ]\n        }\n    ];\n\nlet sortedData = arrayOfObjects.sort(changeData)\nfor (i=0; i < sortedData.length; i++) {\ndata.replace(/NAME/g,(sortedData[i].name)) }\n  console.log(data)\n}\n\n  modifyData(serverData)\n*/\n\n/* \nfunction modifyData (arrayOfObjects) {\n let data = [\n            {name:  'Name',\n            children: [\n                {\n                    name: 'Name',\n                    grandchildren: [\n                        { name: 'Name' },\n                        { name: 'Name' }\n                    ]\n                }\n            ]\n        },\n        {\n            name: 'Name',\n            children: [\n                { name: 'Name' }\n            ]\n        }\n    ];\n\ndata[0].name = arrayOfObjects[0].name \ndata[1].name = arrayOfObjects[1].name  \ndata[0].children[0].name = arrayOfObjects[2].name\ndata[0].children[0].grandchildren[0].name = arrayOfObjects[3].name  \ndata[0].children[0].grandchildren[1].name = arrayOfObjects[4].name\ndata[1].children[0].name = arrayOfObjects[5].name \n\n  return data\n  \n}\n\n  console.log(modifyData(serverData))\n\n*/\n\n/* \n\nconst serverData = [\n        { id: 1, path: '1', name: 'Region A' },\n        { id: 2, path: '2', name: 'Region B' },\n        { id: 3, path: '1.3', name: 'Station 1' },\n        { id: 4, path: '1.3.4', name: 'Section 1' },\n        { id: 5, path: '1.3.5', name: 'Section 2' },\n        { id: 6, path: '2.6', name: 'Station 10' },\n      ];\n\nfunction modifyData () {\n  const newArr = [];\nserverData.forEach(el => {\n  if (el.path.length===1)\n  newArr.push({name: el.name, children: [] })\n});\nserverData.forEach(el => {\n  if (el.path.length===3) \n    newArr[Number(el.path[0])-1].children.push({name: el.name, path: el.path, grandchildren: [] })\n}  \nserverData.forEach(el => {\n if (el.path.length===5) \n  newArr[Number(el.path[0])].children.forEach(dad => {\n    if (dad.path[3] === el.path[3]) {dad.grandchildren.push({name: el.name })}\n  });\n                   }                    \n}\nmodifyData () \n\n*/\n\n/* FINAL: \n\nconst serverData = [\n        { id: 1, path: '1', name: 'Region A' },\n        { id: 2, path: '2', name: 'Region B' },\n        { id: 3, path: '1.3', name: 'Station 1' },\n        { id: 4, path: '1.3.4', name: 'Section 1' },\n        { id: 5, path: '1.3.5', name: 'Section 2' },\n        { id: 6, path: '2.6', name: 'Station 10' },\n      ];\n\nlet newArray = [];\n\nfor (i=0; i < serverData.length; i++) {\n  serverData[i].path = serverData[i].path.split(\".\")\n}\n serverData.forEach(el => {\n   if (el.path.length === 1) { // grandpa \n     newArray.push({name: el.name, children: []})\n   }\n \n   if (el.path.length === 2) { // parent\n     newArray[Number(el.path[0])-1].children.push({name: el.name, children: []}) \n   }\n   if (el.path.length === 3) { // children\n     newArray[Number(el.path[0])-1].children[Number(el.path[0])-1].children.push({name: el.name, children: []}) \n   } \n });\n\nconsole.log(newArray)\n\n\n\n*/","map":{"version":3,"sources":["/Users/bahdana/Desktop/react_dec/my-app/src/components/Tree.js"],"names":["React","PureComponent","Treebeard","data","Tree","constructor","props","state","onToggle","bind","node","toggled","cursor","setState","active","children","Object","assign","componentDidMount","URL","response","fetch","json","console","log","formatedData","modifyData","arrayOfObjects","name","render"],"mappings":"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":["import React, {\n    PureComponent\n} from 'react';\nimport {\n    Treebeard\n} from 'react-treebeard';\n\nconst data = [];\n\n\nexport class Tree extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data\n        };\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    onToggle(node, toggled) {\n        const {\n            cursor,\n            data\n        } = this.state;\n        if (cursor) {\n            this.setState(() => ({\n                cursor,\n                active: true\n            }));\n        }\n        node.active = true;\n        if (node.children) {\n            node.toggled = toggled;\n        }\n        this.setState(() => ({\n            cursor: node,\n            data: Object.assign({}, data)\n        }));\n    }\n    async componentDidMount() {\n        const URL = '/api/regions';\n        const response = await fetch(URL);\n        //console.log(response)\n        const data = await response.json()\n        console.log(data)\n        // const formatedData = data.sort(this.changeData)\n        const formatedData = this.modifyData(data)\n        console.log(formatedData)\n        this.setState({\n            data: formatedData\n        })\n    }\n\n    modifyData(arrayOfObjects) {\n        let data = {\n            //name: 'root',\n            toggled: true,\n            children: [{\n                    name: 'Name',\n                    toggled: true,\n                    children: [{\n                        name: 'Name',\n                        toggled: true,\n                        children: [{\n                                name: 'Name',\n                                toggled: true,\n                            },\n                            {\n                                name: 'Name',\n                                toggled: true,\n                            }\n                        ]\n                    }]\n                },\n                {\n                    name: 'Name',\n                    toggled: true,\n                    children: [{\n                        name: 'Name'\n                    }]\n                }\n            ]\n        };\n\n        data.children[0].name = arrayOfObjects[0].name\n        data.children[1].name = arrayOfObjects[1].name\n        data.children[0].children[0].name = arrayOfObjects[2].name\n        data.children[0].children[0].children[0].name = arrayOfObjects[3].name\n        data.children[0].children[0].children[1].name = arrayOfObjects[4].name\n        data.children[1].children[0].name = arrayOfObjects[5].name\n\n        return data\n\n    }\n\n    render() {\n        const {\n            data\n        } = this.state;\n        return ( <\n            Treebeard data = {\n                data\n            }\n            onToggle = {\n                this.onToggle\n            }\n            />\n        );\n    }\n}\nexport default Tree\n\n\n/* \nconst serverData = [\n        { id: 1, path: '1', name: 'Region A' },\n        { id: 2, path: '2', name: 'Region B' },\n        { id: 3, path: '1.3', name: 'Station 1' },\n        { id: 4, path: '1.3.4', name: 'Section 1' },\n        { id: 5, path: '1.3.5', name: 'Section 2' },\n        { id: 6, path: '2.6', name: 'Station 10' },\n      ];\nconst data = [\n            {name: 'Name 1',\n            children: [\n                {\n                    name: 'Name 2',\n                    children: [\n                        { name: 'Name 3' },\n                        { name: 'Name 4' }\n                    ]\n                }\n            ]\n        },\n        {\n            name: 'Name 5',\n            children: [\n                { name: 'Name 6' }\n            ]\n        }\n    ];\n\n\nfunction changeData (a, b) {\n        if ( a.path < b.path ){\n          return -1;\n        }\n        if ( a.path > b.path ){\n          return 1;\n        }\n        return 0;\n      }\n\n      function reGroupArray(arr, size) {\n   var newArr = []\n   for (var i = 0; i <= Math.ceil(arr.length / size); i++) {\n \n       var j = 0;\n       if (i !== 0) {\n           j = j + size;\n           size = size + size;\n       }\n \n       newArr[i] = arr.slice(j, size);\n \n   }\n \n   return newArr;\n}\nvar formatedData = serverData.sort(changeData)\nconsole.log(formatedData)\n mapedArray = formatedData.map(el => el.path.split(\".\")) \nfor (i=0; i <mapedArray.length; i++) {\nif (mapedArray[i].length == 1) {mapedArray[i].id = \"parent\"}\n  else if (mapedArray[i].length == 2) {mapedArray[i].id = \"child\"}\n  else  {mapedArray[i].id = \"grandchild\"}\n}\nconsole.log( mapedArray)\nconsole.log(serverData.length)\nconsole.log(data.length)  */\n\n\n/* \n\nfunction modifyData (arrayOfObjects) {\n let data = [\n            {name: 'NAME',\n            children: [\n                {\n                    name: 'NAME',\n                    grandchildren: [\n                        { name: 'NAME' },\n                        { name: 'NAME' }\n                    ]\n                }\n            ]\n        },\n        {\n            name: 'NAME',\n            children: [\n                { name: 'NAME' }\n            ]\n        }\n    ];\n\nlet sortedData = arrayOfObjects.sort(changeData)\nfor (i=0; i < sortedData.length; i++) {\ndata.replace(/NAME/g,(sortedData[i].name)) }\n  console.log(data)\n}\n\n  modifyData(serverData)\n*/\n\n/* \nfunction modifyData (arrayOfObjects) {\n let data = [\n            {name:  'Name',\n            children: [\n                {\n                    name: 'Name',\n                    grandchildren: [\n                        { name: 'Name' },\n                        { name: 'Name' }\n                    ]\n                }\n            ]\n        },\n        {\n            name: 'Name',\n            children: [\n                { name: 'Name' }\n            ]\n        }\n    ];\n\ndata[0].name = arrayOfObjects[0].name \ndata[1].name = arrayOfObjects[1].name  \ndata[0].children[0].name = arrayOfObjects[2].name\ndata[0].children[0].grandchildren[0].name = arrayOfObjects[3].name  \ndata[0].children[0].grandchildren[1].name = arrayOfObjects[4].name\ndata[1].children[0].name = arrayOfObjects[5].name \n\n  return data\n  \n}\n\n  console.log(modifyData(serverData))\n\n*/\n\n/* \n\nconst serverData = [\n        { id: 1, path: '1', name: 'Region A' },\n        { id: 2, path: '2', name: 'Region B' },\n        { id: 3, path: '1.3', name: 'Station 1' },\n        { id: 4, path: '1.3.4', name: 'Section 1' },\n        { id: 5, path: '1.3.5', name: 'Section 2' },\n        { id: 6, path: '2.6', name: 'Station 10' },\n      ];\n\nfunction modifyData () {\n  const newArr = [];\nserverData.forEach(el => {\n  if (el.path.length===1)\n  newArr.push({name: el.name, children: [] })\n});\nserverData.forEach(el => {\n  if (el.path.length===3) \n    newArr[Number(el.path[0])-1].children.push({name: el.name, path: el.path, grandchildren: [] })\n}  \nserverData.forEach(el => {\n if (el.path.length===5) \n  newArr[Number(el.path[0])].children.forEach(dad => {\n    if (dad.path[3] === el.path[3]) {dad.grandchildren.push({name: el.name })}\n  });\n                   }                    \n}\nmodifyData () \n\n*/\n\n\n/* FINAL: \n\nconst serverData = [\n        { id: 1, path: '1', name: 'Region A' },\n        { id: 2, path: '2', name: 'Region B' },\n        { id: 3, path: '1.3', name: 'Station 1' },\n        { id: 4, path: '1.3.4', name: 'Section 1' },\n        { id: 5, path: '1.3.5', name: 'Section 2' },\n        { id: 6, path: '2.6', name: 'Station 10' },\n      ];\n\nlet newArray = [];\n\nfor (i=0; i < serverData.length; i++) {\n  serverData[i].path = serverData[i].path.split(\".\")\n}\n serverData.forEach(el => {\n   if (el.path.length === 1) { // grandpa \n     newArray.push({name: el.name, children: []})\n   }\n \n   if (el.path.length === 2) { // parent\n     newArray[Number(el.path[0])-1].children.push({name: el.name, children: []}) \n   }\n   if (el.path.length === 3) { // children\n     newArray[Number(el.path[0])-1].children[Number(el.path[0])-1].children.push({name: el.name, children: []}) \n   } \n });\n\nconsole.log(newArray)\n\n\n\n*/"]},"metadata":{},"sourceType":"module"}