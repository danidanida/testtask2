{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bahdana/Desktop/react_dec/my-app/src/components/Tree.js\";\nimport React, { PureComponent } from 'react';\nimport { Treebeard } from 'react-treebeard';\nconst data = {\n  /*name: 'root',\n  toggled: true, */\n  toggled: true,\n  children: [\n  /*{\n      name: 'loading parent',\n      loading: true,\n      children: []\n  },*/\n  {\n    name: 'Region A',\n    children: [{\n      name: 'Station 1',\n      children: [{\n        name: 'Section 1'\n      }, {\n        name: 'Section 2'\n      }]\n    }]\n  }, {\n    name: 'Region B',\n    children: [{\n      name: 'Station 10'\n    }]\n  }]\n};\nexport class Tree extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data\n    };\n    this.onToggle = this.onToggle.bind(this);\n  }\n\n  onToggle(node, toggled) {\n    const {\n      cursor,\n      data\n    } = this.state;\n\n    if (cursor) {\n      this.setState(() => ({\n        cursor,\n        active: false\n      }));\n    }\n\n    node.active = true;\n\n    if (node.children) {\n      node.toggled = toggled;\n    }\n\n    this.setState(() => ({\n      cursor: node,\n      data: Object.assign({}, data)\n    }));\n  }\n\n  render() {\n    const {\n      data\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Treebeard, {\n      data: data,\n      onToggle: this.onToggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport default Tree;","map":{"version":3,"sources":["/Users/bahdana/Desktop/react_dec/my-app/src/components/Tree.js"],"names":["React","PureComponent","Treebeard","data","toggled","children","name","Tree","constructor","props","state","onToggle","bind","node","cursor","setState","active","Object","assign","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,aAAf,QAAmC,OAAnC;AACA,SAAQC,SAAR,QAAwB,iBAAxB;AAEA,MAAMC,IAAI,GAAG;AACT;AACJ;AACIC,EAAAA,OAAO,EAAE,IAHA;AAITC,EAAAA,QAAQ,EAAE;AACN;AACR;AACA;AACA;AACA;AACQ;AACIC,IAAAA,IAAI,EAAE,UADV;AAEID,IAAAA,QAAQ,EAAE,CACN;AACIC,MAAAA,IAAI,EAAE,WADV;AAEID,MAAAA,QAAQ,EAAE,CACN;AAAEC,QAAAA,IAAI,EAAE;AAAR,OADM,EAEN;AAAEA,QAAAA,IAAI,EAAE;AAAR,OAFM;AAFd,KADM;AAFd,GANM,EAkBN;AACIA,IAAAA,IAAI,EAAE,UADV;AAEID,IAAAA,QAAQ,EAAE,CACN;AAAEC,MAAAA,IAAI,EAAE;AAAR,KADM;AAFd,GAlBM;AAJD,CAAb;AA+BA,OAAO,MAAMC,IAAN,SAAmBN,aAAnB,CAAiC;AACpCO,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAACP,MAAAA;AAAD,KAAb;AACA,SAAKQ,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACH;;AAEDD,EAAAA,QAAQ,CAACE,IAAD,EAAOT,OAAP,EAAe;AACnB,UAAM;AAACU,MAAAA,MAAD;AAASX,MAAAA;AAAT,QAAiB,KAAKO,KAA5B;;AACA,QAAII,MAAJ,EAAY;AACR,WAAKC,QAAL,CAAc,OAAO;AAACD,QAAAA,MAAD;AAASE,QAAAA,MAAM,EAAE;AAAjB,OAAP,CAAd;AACH;;AACDH,IAAAA,IAAI,CAACG,MAAL,GAAc,IAAd;;AACA,QAAIH,IAAI,CAACR,QAAT,EAAmB;AACfQ,MAAAA,IAAI,CAACT,OAAL,GAAeA,OAAf;AACH;;AACD,SAAKW,QAAL,CAAc,OAAO;AAACD,MAAAA,MAAM,EAAED,IAAT;AAAeV,MAAAA,IAAI,EAAEc,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBf,IAAlB;AAArB,KAAP,CAAd;AACH;;AAEDgB,EAAAA,MAAM,GAAE;AACJ,UAAM;AAAChB,MAAAA;AAAD,QAAS,KAAKO,KAApB;AACA,wBACI,QAAC,SAAD;AACI,MAAA,IAAI,EAAEP,IADV;AAEI,MAAA,QAAQ,EAAE,KAAKQ;AAFnB;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AA3BmC;AA6BxC,eAAeJ,IAAf","sourcesContent":["import React, {PureComponent} from 'react';\nimport {Treebeard} from 'react-treebeard';\n\nconst data = {\n    /*name: 'root',\n    toggled: true, */\n    toggled: true,\n    children: [\n        /*{\n            name: 'loading parent',\n            loading: true,\n            children: []\n        },*/\n        {\n            name: 'Region A',\n            children: [\n                {\n                    name: 'Station 1',\n                    children: [\n                        { name: 'Section 1' },\n                        { name: 'Section 2' }\n                    ]\n                }\n            ]\n        },\n        {\n            name: 'Region B',\n            children: [\n                { name: 'Station 10' }\n            ]\n        }\n    ]\n};\n\nexport class Tree extends PureComponent {\n    constructor(props){\n        super(props);\n        this.state = {data};\n        this.onToggle = this.onToggle.bind(this);\n    }\n    \n    onToggle(node, toggled){\n        const {cursor, data} = this.state;\n        if (cursor) {\n            this.setState(() => ({cursor, active: false}));\n        }\n        node.active = true;\n        if (node.children) { \n            node.toggled = toggled; \n        }\n        this.setState(() => ({cursor: node, data: Object.assign({}, data)}));\n    }\n    \n    render(){\n        const {data} = this.state;\n        return (\n            <Treebeard\n                data={data}\n                onToggle={this.onToggle}\n            />\n        );\n    }\n}\nexport default Tree"]},"metadata":{},"sourceType":"module"}