{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/bahdana/Desktop/test-taskFINAL/my-app/src/app.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport NodeComponent from './nodeComponent';\n\nfunction formatData(serverData) {\n  var data = {\n    name: \"\",\n    toggled: true,\n    children: []\n  };\n  let newArray = [];\n\n  for (let i = 0; i < serverData.length; i++) {\n    serverData[i].path = serverData[i].path.split(\".\");\n  }\n\n  serverData.forEach(el => {\n    if (el.path.length === 1) {\n      // grandpa \n      newArray.push({\n        name: el.name,\n        children: []\n      });\n    }\n\n    if (el.path.length === 2) {\n      // parent\n      newArray[el.path[0] - 1].children.push({\n        name: el.name,\n        children: []\n      });\n    }\n\n    if (el.path.length === 3) {\n      // children\n      newArray[el.path[0] - 1].children[el.path[0] - 1].children.push({\n        name: el.name,\n        children: []\n      });\n    }\n  });\n  data.children = newArray;\n  return data;\n}\n\nconst App = () => {\n  _s();\n\n  const [state, setState] = useState([]); // const dataModel = {text:\"something\", children:[]};\n  // const modifiedData = [];\n\n  useEffect(async () => {\n    const response = await fetch(\"/api/regions\");\n    const data = await response.json();\n    console.log(data);\n    const formattedData = formatData(data); //console.log(data[3].path)\n    //state = data\n\n    setState(data);\n  }, []);\n  return (\n    /*#__PURE__*/\n\n    /*\n        <div>\n    \n    {state.map =  function myFunction(d) {\n     return <h2>d.name</h2> \n    } }\n        </div>  */\n    _jsxDEV(\"div\", {\n      children: state.map(d => /*#__PURE__*/_jsxDEV(NodeComponent, {\n        dataModel: d\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 30\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)\n    /*\n            <div>\n                {state.map(function(d) { \n                        d.path = d.path.split(\".\")\n                   //console.log(d.path) \n                  if (d.path.length === 1) { \n                    return <div><h1> {d.name} </h1> <div></div> </div> \n                    //return <h1>{dataModel.text = d.name} </h1>\n                  }\n                  if (d.path.length === 2) { // parent\n                    //newArray[(el.path[0])-1].children.push({name: el.name, children: []})\n                    \n                  }\n                  if (d.path.length === 3) { // children\n                  //  newArray[(el.path[0])-1].children[(el.path[0])-1].children.push({name: el.name, children: []}) \n                  } \n    \n                    })}\n            </div> \n            */\n\n  );\n};\n\n_s(App, \"7zZJjGiSRppMnnlYfwuyXOUEkjY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/bahdana/Desktop/test-taskFINAL/my-app/src/app.js"],"names":["React","useState","useEffect","NodeComponent","formatData","serverData","data","name","toggled","children","newArray","i","length","path","split","forEach","el","push","App","state","setState","response","fetch","json","console","log","formattedData","map","d"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport NodeComponent from './nodeComponent'\n\nfunction formatData (serverData) {\n    var data = {name: \"\", toggled:true, children:[]}\n  let newArray = [];\n  \n  for (let i=0; i < serverData.length; i++) {\n    serverData[i].path = serverData[i].path.split(\".\")\n  }\n   serverData.forEach(el => {\n     if (el.path.length === 1) { // grandpa \n       newArray.push({name: el.name, children: []})\n     }\n   \n     if (el.path.length === 2) { // parent\n       newArray[(el.path[0])-1].children.push({name: el.name, children: []}) \n     }\n     if (el.path.length === 3) { // children\n       newArray[(el.path[0])-1].children[(el.path[0])-1].children.push({name: el.name, children: []}) \n     } \n   }) \n   data.children = newArray\n  return data\n  }\n\nconst App = () => {\n    const [state, setState] = useState([]);\n\n   // const dataModel = {text:\"something\", children:[]};\n\n   // const modifiedData = [];\n     useEffect(async () => {\n         const response = await fetch(\"/api/regions\");\n         const data = await response.json();\n         console.log(data)\n         const formattedData = formatData(data);\n         //console.log(data[3].path)\n         //state = data\n         setState(data);\n    \n    }, []);\n\n    return ( \n/*\n    <div>\n\n{state.map =  function myFunction(d) {\n return <h2>d.name</h2> \n} }\n    </div>  */\n        \n       \n        <div>\n            {state.map( d => <NodeComponent dataModel = {d} /> )}\n        </div>   \n/*\n        <div>\n            {state.map(function(d) { \n                    d.path = d.path.split(\".\")\n               //console.log(d.path) \n              if (d.path.length === 1) { \n                return <div><h1> {d.name} </h1> <div></div> </div> \n                //return <h1>{dataModel.text = d.name} </h1>\n              }\n              if (d.path.length === 2) { // parent\n                //newArray[(el.path[0])-1].children.push({name: el.name, children: []})\n                \n              }\n              if (d.path.length === 3) { // children\n              //  newArray[(el.path[0])-1].children[(el.path[0])-1].children.push({name: el.name, children: []}) \n              } \n\n                })}\n        </div> \n        */\n    ) \n}\n\nexport default App; "]},"metadata":{},"sourceType":"module"}