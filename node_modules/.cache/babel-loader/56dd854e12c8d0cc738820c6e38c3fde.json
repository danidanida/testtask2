{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/bahdana/Desktop/testtask2/my-app/src/app.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport NodeComponent from './nodeComponent';\n\nfunction formatData(serverData) {\n  var data = {\n    name: \"\",\n    toggled: true,\n    children: []\n  };\n  let newArray = [];\n\n  for (let i = 0; i < serverData.length; i++) {\n    serverData[i].path = serverData[i].path.split(\".\");\n  }\n\n  serverData.forEach(el => {\n    if (el.path.length === 1) {\n      newArray.push({\n        name: el.name,\n        children: []\n      });\n    }\n\n    if (el.path.length === 2) {\n      newArray[el.path[0] - 1].children.push({\n        name: el.name,\n        children: []\n      });\n    }\n\n    if (el.path.length === 3) {\n      newArray[el.path[0] - 1].children[el.path[0] - 1].children.push({\n        name: el.name,\n        children: []\n      });\n    }\n  });\n  data.children = newArray;\n  return data;\n}\n\nconst App = () => {\n  _s();\n\n  const [state, setState] = useState({\n    children: []\n  });\n  useEffect(async () => {\n    const response = await fetch(\"/api/regions\");\n    const data = await response.json();\n    const formattedData = formatData(data);\n    setState(formattedData);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: state.children.map(d => /*#__PURE__*/_jsxDEV(NodeComponent, {\n      dataModel: d\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 38\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"Yr6mB3CCNSM+6nEfovXGNyoTDTs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/bahdana/Desktop/testtask2/my-app/src/app.js"],"names":["React","useState","useEffect","NodeComponent","formatData","serverData","data","name","toggled","children","newArray","i","length","path","split","forEach","el","push","App","state","setState","response","fetch","json","formattedData","map","d"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AAEA,SAASC,UAAT,CAAoBC,UAApB,EAAgC;AAC5B,MAAIC,IAAI,GAAG;AAAEC,IAAAA,IAAI,EAAE,EAAR;AAAYC,IAAAA,OAAO,EAAE,IAArB;AAA2BC,IAAAA,QAAQ,EAAE;AAArC,GAAX;AACA,MAAIC,QAAQ,GAAG,EAAf;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,UAAU,CAACO,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxCN,IAAAA,UAAU,CAACM,CAAD,CAAV,CAAcE,IAAd,GAAqBR,UAAU,CAACM,CAAD,CAAV,CAAcE,IAAd,CAAmBC,KAAnB,CAAyB,GAAzB,CAArB;AACH;;AACDT,EAAAA,UAAU,CAACU,OAAX,CAAmBC,EAAE,IAAI;AACrB,QAAIA,EAAE,CAACH,IAAH,CAAQD,MAAR,KAAmB,CAAvB,EAA0B;AACtBF,MAAAA,QAAQ,CAACO,IAAT,CAAc;AAAEV,QAAAA,IAAI,EAAES,EAAE,CAACT,IAAX;AAAiBE,QAAAA,QAAQ,EAAE;AAA3B,OAAd;AACH;;AAED,QAAIO,EAAE,CAACH,IAAH,CAAQD,MAAR,KAAmB,CAAvB,EAA0B;AACtBF,MAAAA,QAAQ,CAAEM,EAAE,CAACH,IAAH,CAAQ,CAAR,CAAD,GAAe,CAAhB,CAAR,CAA2BJ,QAA3B,CAAoCQ,IAApC,CAAyC;AAAEV,QAAAA,IAAI,EAAES,EAAE,CAACT,IAAX;AAAiBE,QAAAA,QAAQ,EAAE;AAA3B,OAAzC;AACH;;AACD,QAAIO,EAAE,CAACH,IAAH,CAAQD,MAAR,KAAmB,CAAvB,EAA0B;AACtBF,MAAAA,QAAQ,CAAEM,EAAE,CAACH,IAAH,CAAQ,CAAR,CAAD,GAAe,CAAhB,CAAR,CAA2BJ,QAA3B,CAAqCO,EAAE,CAACH,IAAH,CAAQ,CAAR,CAAD,GAAe,CAAnD,EAAsDJ,QAAtD,CAA+DQ,IAA/D,CAAoE;AAAEV,QAAAA,IAAI,EAAES,EAAE,CAACT,IAAX;AAAiBE,QAAAA,QAAQ,EAAE;AAA3B,OAApE;AACH;AACJ,GAXD;AAYAH,EAAAA,IAAI,CAACG,QAAL,GAAgBC,QAAhB;AACA,SAAOJ,IAAP;AACH;;AAED,MAAMY,GAAG,GAAG,MAAM;AAAA;;AACd,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAAC;AAAEQ,IAAAA,QAAQ,EAAE;AAAZ,GAAD,CAAlC;AAGAP,EAAAA,SAAS,CAAC,YAAY;AAClB,UAAMmB,QAAQ,GAAG,MAAMC,KAAK,CAAC,cAAD,CAA5B;AACA,UAAMhB,IAAI,GAAG,MAAMe,QAAQ,CAACE,IAAT,EAAnB;AACA,UAAMC,aAAa,GAAGpB,UAAU,CAACE,IAAD,CAAhC;AACAc,IAAAA,QAAQ,CAACI,aAAD,CAAR;AAEH,GANQ,EAMN,EANM,CAAT;AAQA,sBAEI;AAAA,cACKL,KAAK,CAACV,QAAN,CAAegB,GAAf,CAAmBC,CAAC,iBAAI,QAAC,aAAD;AAAe,MAAA,SAAS,EAAEA;AAA1B;AAAA;AAAA;AAAA;AAAA,YAAxB;AADL;AAAA;AAAA;AAAA;AAAA,UAFJ;AAOH,CAnBD;;GAAMR,G;;KAAAA,G;AAqBN,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport NodeComponent from './nodeComponent'\n\nfunction formatData(serverData) {\n    var data = { name: \"\", toggled: true, children: [] }\n    let newArray = [];\n\n    for (let i = 0; i < serverData.length; i++) {\n        serverData[i].path = serverData[i].path.split(\".\")\n    }\n    serverData.forEach(el => {\n        if (el.path.length === 1) { \n            newArray.push({ name: el.name, children: [] })\n        }\n\n        if (el.path.length === 2) { \n            newArray[(el.path[0]) - 1].children.push({ name: el.name, children: [] })\n        }\n        if (el.path.length === 3) { \n            newArray[(el.path[0]) - 1].children[(el.path[0]) - 1].children.push({ name: el.name, children: [] })\n        }\n    })\n    data.children = newArray\n    return data\n}\n\nconst App = () => {\n    const [state, setState] = useState({ children: [] });\n\n\n    useEffect(async () => {\n        const response = await fetch(\"/api/regions\");\n        const data = await response.json();\n        const formattedData = formatData(data);\n        setState(formattedData);\n\n    }, []);\n\n    return (\n\n        <div>\n            {state.children.map(d => <NodeComponent dataModel={d} />)}\n        </div>\n\n    )\n}\n\nexport default App; "]},"metadata":{},"sourceType":"module"}