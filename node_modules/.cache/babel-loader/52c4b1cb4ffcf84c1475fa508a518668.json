{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bahdana/Desktop/react_dec/my-app/src/components/Tree.js\";\nimport React, { PureComponent } from 'react';\nimport { Treebeard } from 'react-treebeard';\nconst data = [];\nexport class Tree extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data\n    };\n    this.onToggle = this.onToggle.bind(this);\n  }\n\n  onToggle(node, toggled) {\n    const {\n      cursor,\n      data\n    } = this.state;\n\n    if (cursor) {\n      this.setState(() => ({\n        cursor,\n        active: true\n      }));\n    }\n\n    node.active = true;\n\n    if (node.children) {\n      node.toggled = toggled;\n    }\n\n    this.setState(() => ({\n      cursor: node,\n      data: Object.assign({}, data)\n    }));\n  }\n\n  async componentDidMount() {\n    const URL = '/api/regions';\n    const response = await fetch(URL); //console.log(response)\n\n    const data = await response.json();\n    console.log(data); // const formatedData = data.sort(this.changeData)\n\n    const formatedData = this.modifyData(data);\n    console.log(formatedData);\n    this.setState({\n      data: formatedData\n    });\n  }\n  /*changeData (a, b) {\n      if ( a.path < b.path ){\n        return -1;\n      }\n      if ( a.path > b.path ){\n        return 1;\n      }\n      return 0;\n    } */\n\n\n  modifyData(arrayOfObjects) {\n    let data = [{\n      name: 'Name',\n      children: [{\n        name: 'Name',\n        toggled: true,\n        children: [{\n          name: 'Name',\n          toggled: true\n        }, {\n          name: 'Name',\n          toggled: false\n        }]\n      }]\n    }, {\n      name: 'Name',\n      toggled: false,\n      children: [{\n        name: 'Name'\n      }]\n    }];\n    data[0].name = arrayOfObjects[0].name;\n    data[1].name = arrayOfObjects[1].name;\n    data[0].children[0].name = arrayOfObjects[2].name;\n    data[0].children[0].children[0].name = arrayOfObjects[3].name;\n    data[0].children[0].children[1].name = arrayOfObjects[4].name;\n    data[1].children[0].name = arrayOfObjects[5].name;\n    return data;\n  }\n\n  render() {\n    const {\n      data\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Treebeard, {\n      data: data,\n      onToggle: this.onToggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport default Tree;\n/* \nconst serverData = [\n        { id: 1, path: '1', name: 'Region A' },\n        { id: 2, path: '2', name: 'Region B' },\n        { id: 3, path: '1.3', name: 'Station 1' },\n        { id: 4, path: '1.3.4', name: 'Section 1' },\n        { id: 5, path: '1.3.5', name: 'Section 2' },\n        { id: 6, path: '2.6', name: 'Station 10' },\n      ];\nconst data = [\n            {name: 'Name 1',\n            children: [\n                {\n                    name: 'Name 2',\n                    children: [\n                        { name: 'Name 3' },\n                        { name: 'Name 4' }\n                    ]\n                }\n            ]\n        },\n        {\n            name: 'Name 5',\n            children: [\n                { name: 'Name 6' }\n            ]\n        }\n    ];\n\n\nfunction changeData (a, b) {\n        if ( a.path < b.path ){\n          return -1;\n        }\n        if ( a.path > b.path ){\n          return 1;\n        }\n        return 0;\n      }\n\n      function reGroupArray(arr, size) {\n   var newArr = []\n   for (var i = 0; i <= Math.ceil(arr.length / size); i++) {\n \n       var j = 0;\n       if (i !== 0) {\n           j = j + size;\n           size = size + size;\n       }\n \n       newArr[i] = arr.slice(j, size);\n \n   }\n \n   return newArr;\n}\nvar formatedData = serverData.sort(changeData)\nconsole.log(formatedData)\n mapedArray = formatedData.map(el => el.path.split(\".\")) \nfor (i=0; i <mapedArray.length; i++) {\nif (mapedArray[i].length == 1) {mapedArray[i].id = \"parent\"}\n  else if (mapedArray[i].length == 2) {mapedArray[i].id = \"child\"}\n  else  {mapedArray[i].id = \"grandchild\"}\n}\nconsole.log( mapedArray)\nconsole.log(serverData.length)\nconsole.log(data.length)  */\n\n/* \n\nfunction modifyData (arrayOfObjects) {\n let data = [\n            {name: 'NAME',\n            children: [\n                {\n                    name: 'NAME',\n                    grandchildren: [\n                        { name: 'NAME' },\n                        { name: 'NAME' }\n                    ]\n                }\n            ]\n        },\n        {\n            name: 'NAME',\n            children: [\n                { name: 'NAME' }\n            ]\n        }\n    ];\n\nlet sortedData = arrayOfObjects.sort(changeData)\nfor (i=0; i < sortedData.length; i++) {\ndata.replace(/NAME/g,(sortedData[i].name)) }\n  console.log(data)\n}\n\n  modifyData(serverData)\n*/\n\n/* \nfunction modifyData (arrayOfObjects) {\n let data = [\n            {name:  'Name',\n            children: [\n                {\n                    name: 'Name',\n                    grandchildren: [\n                        { name: 'Name' },\n                        { name: 'Name' }\n                    ]\n                }\n            ]\n        },\n        {\n            name: 'Name',\n            children: [\n                { name: 'Name' }\n            ]\n        }\n    ];\n\ndata[0].name = arrayOfObjects[0].name \ndata[1].name = arrayOfObjects[1].name  \ndata[0].children[0].name = arrayOfObjects[2].name\ndata[0].children[0].grandchildren[0].name = arrayOfObjects[3].name  \ndata[0].children[0].grandchildren[1].name = arrayOfObjects[4].name\ndata[1].children[0].name = arrayOfObjects[5].name \n\n  return data\n  \n}\n\n  console.log(modifyData(serverData))\n\n*/\n\n/* \n\nconst serverData = [\n        { id: 1, path: '1', name: 'Region A' },\n        { id: 2, path: '2', name: 'Region B' },\n        { id: 3, path: '1.3', name: 'Station 1' },\n        { id: 4, path: '1.3.4', name: 'Section 1' },\n        { id: 5, path: '1.3.5', name: 'Section 2' },\n        { id: 6, path: '2.6', name: 'Station 10' },\n      ];\n\nfunction modifyData () {\n  const newArr = [];\nserverData.forEach(el => {\n  if (el.path.length===1)\n  newArr.push({name: el.name, children: [] })\n});\nserverData.forEach(el => {\n  if (el.path.length===3) \n    newArr[Number(el.path[0])-1].children.push({name: el.name, path: el.path, grandchildren: [] })\n}  \nserverData.forEach(el => {\n if (el.path.length===5) \n  newArr[Number(el.path[0])].children.forEach(dad => {\n    if (dad.path[3] === el.path[3]) {dad.grandchildren.push({name: el.name })}\n  });\n                   }                    \n}\nmodifyData () \n\n*/","map":{"version":3,"sources":["/Users/bahdana/Desktop/react_dec/my-app/src/components/Tree.js"],"names":["React","PureComponent","Treebeard","data","Tree","constructor","props","state","onToggle","bind","node","toggled","cursor","setState","active","children","Object","assign","componentDidMount","URL","response","fetch","json","console","log","formatedData","modifyData","arrayOfObjects","name","render"],"mappings":"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":["import React, {PureComponent} from 'react';\nimport {Treebeard} from 'react-treebeard';\n\nconst data = [ ];\n\n\nexport class Tree extends PureComponent {\n    constructor(props){\n        super(props);\n        this.state = {data};\n        this.onToggle = this.onToggle.bind(this);\n    }\n    \n    onToggle(node, toggled){\n        const {cursor, data} = this.state;\n        if (cursor) {\n            this.setState(() => ({cursor, active: true}));\n        }\n        node.active = true;\n        if (node.children) { \n            node.toggled = toggled; \n        }\n        this.setState(() => ({cursor: node, data: Object.assign({}, data)}));\n    }\n    async componentDidMount() {\n        const URL = '/api/regions'; \n        const response = await fetch(URL);\n        //console.log(response)\n        const data = await response.json()\n        console.log(data)\n       // const formatedData = data.sort(this.changeData)\n       const formatedData = this.modifyData(data)\n        console.log(formatedData)\n        this.setState({data:formatedData})\n    }\n\n    /*changeData (a, b) {\n        if ( a.path < b.path ){\n          return -1;\n        }\n        if ( a.path > b.path ){\n          return 1;\n        }\n        return 0;\n      } */ \n       modifyData (arrayOfObjects) {\n        let data = [\n                   {name:  'Name',\n                   children: [\n                       {\n                           name: 'Name',\n                           toggled:true,\n                           children: [\n                               { name: 'Name',\n                               toggled:true,\n                                },\n                               { name: 'Name',\n                               toggled:false,\n                                }\n                           ]\n                       }\n                   ]\n               },\n               {\n                   name: 'Name',\n                   toggled:false,\n                   children: [\n                       { name: 'Name' }\n                   ]\n               }\n           ];\n       \n       data[0].name = arrayOfObjects[0].name \n       data[1].name = arrayOfObjects[1].name  \n       data[0].children[0].name = arrayOfObjects[2].name\n       data[0].children[0].children[0].name = arrayOfObjects[3].name  \n       data[0].children[0].children[1].name = arrayOfObjects[4].name\n       data[1].children[0].name = arrayOfObjects[5].name \n       \n         return data\n         \n       } \n\n    render(){\n        const {data} = this.state;\n        return (\n            <Treebeard\n                data={data}\n                onToggle={this.onToggle}\n            />\n        );\n    }\n}\nexport default Tree\n\n\n/* \nconst serverData = [\n        { id: 1, path: '1', name: 'Region A' },\n        { id: 2, path: '2', name: 'Region B' },\n        { id: 3, path: '1.3', name: 'Station 1' },\n        { id: 4, path: '1.3.4', name: 'Section 1' },\n        { id: 5, path: '1.3.5', name: 'Section 2' },\n        { id: 6, path: '2.6', name: 'Station 10' },\n      ];\nconst data = [\n            {name: 'Name 1',\n            children: [\n                {\n                    name: 'Name 2',\n                    children: [\n                        { name: 'Name 3' },\n                        { name: 'Name 4' }\n                    ]\n                }\n            ]\n        },\n        {\n            name: 'Name 5',\n            children: [\n                { name: 'Name 6' }\n            ]\n        }\n    ];\n\n\nfunction changeData (a, b) {\n        if ( a.path < b.path ){\n          return -1;\n        }\n        if ( a.path > b.path ){\n          return 1;\n        }\n        return 0;\n      }\n\n      function reGroupArray(arr, size) {\n   var newArr = []\n   for (var i = 0; i <= Math.ceil(arr.length / size); i++) {\n \n       var j = 0;\n       if (i !== 0) {\n           j = j + size;\n           size = size + size;\n       }\n \n       newArr[i] = arr.slice(j, size);\n \n   }\n \n   return newArr;\n}\nvar formatedData = serverData.sort(changeData)\nconsole.log(formatedData)\n mapedArray = formatedData.map(el => el.path.split(\".\")) \nfor (i=0; i <mapedArray.length; i++) {\nif (mapedArray[i].length == 1) {mapedArray[i].id = \"parent\"}\n  else if (mapedArray[i].length == 2) {mapedArray[i].id = \"child\"}\n  else  {mapedArray[i].id = \"grandchild\"}\n}\nconsole.log( mapedArray)\nconsole.log(serverData.length)\nconsole.log(data.length)  */\n\n\n/* \n\nfunction modifyData (arrayOfObjects) {\n let data = [\n            {name: 'NAME',\n            children: [\n                {\n                    name: 'NAME',\n                    grandchildren: [\n                        { name: 'NAME' },\n                        { name: 'NAME' }\n                    ]\n                }\n            ]\n        },\n        {\n            name: 'NAME',\n            children: [\n                { name: 'NAME' }\n            ]\n        }\n    ];\n\nlet sortedData = arrayOfObjects.sort(changeData)\nfor (i=0; i < sortedData.length; i++) {\ndata.replace(/NAME/g,(sortedData[i].name)) }\n  console.log(data)\n}\n\n  modifyData(serverData)\n*/\n\n/* \nfunction modifyData (arrayOfObjects) {\n let data = [\n            {name:  'Name',\n            children: [\n                {\n                    name: 'Name',\n                    grandchildren: [\n                        { name: 'Name' },\n                        { name: 'Name' }\n                    ]\n                }\n            ]\n        },\n        {\n            name: 'Name',\n            children: [\n                { name: 'Name' }\n            ]\n        }\n    ];\n\ndata[0].name = arrayOfObjects[0].name \ndata[1].name = arrayOfObjects[1].name  \ndata[0].children[0].name = arrayOfObjects[2].name\ndata[0].children[0].grandchildren[0].name = arrayOfObjects[3].name  \ndata[0].children[0].grandchildren[1].name = arrayOfObjects[4].name\ndata[1].children[0].name = arrayOfObjects[5].name \n\n  return data\n  \n}\n\n  console.log(modifyData(serverData))\n\n*/ \n\n/* \n\nconst serverData = [\n        { id: 1, path: '1', name: 'Region A' },\n        { id: 2, path: '2', name: 'Region B' },\n        { id: 3, path: '1.3', name: 'Station 1' },\n        { id: 4, path: '1.3.4', name: 'Section 1' },\n        { id: 5, path: '1.3.5', name: 'Section 2' },\n        { id: 6, path: '2.6', name: 'Station 10' },\n      ];\n\nfunction modifyData () {\n  const newArr = [];\nserverData.forEach(el => {\n  if (el.path.length===1)\n  newArr.push({name: el.name, children: [] })\n});\nserverData.forEach(el => {\n  if (el.path.length===3) \n    newArr[Number(el.path[0])-1].children.push({name: el.name, path: el.path, grandchildren: [] })\n}  \nserverData.forEach(el => {\n if (el.path.length===5) \n  newArr[Number(el.path[0])].children.forEach(dad => {\n    if (dad.path[3] === el.path[3]) {dad.grandchildren.push({name: el.name })}\n  });\n                   }                    \n}\nmodifyData () \n\n*/ "]},"metadata":{},"sourceType":"module"}