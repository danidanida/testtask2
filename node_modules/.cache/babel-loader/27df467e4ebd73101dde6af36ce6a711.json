{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bahdana/Desktop/react_dec/my-app/src/components/Tree.js\";\nimport React, { PureComponent } from 'react';\nimport { Treebeard } from 'react-treebeard';\nconst data = [{\n  name: 'Name 1',\n  children: [{\n    name: 'Name 2',\n    grandchildren: [{\n      name: 'Name 3'\n    }, {\n      name: 'Name 4'\n    }]\n  }]\n}, {\n  name: 'Name 5',\n  children: [{\n    name: 'Name 6'\n  }]\n}];\nexport class Tree extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data\n    };\n    this.onToggle = this.onToggle.bind(this);\n  }\n\n  onToggle(node, toggled) {\n    const {\n      cursor,\n      data\n    } = this.state;\n\n    if (cursor) {\n      this.setState(() => ({\n        cursor,\n        active: false\n      }));\n    }\n\n    node.active = true;\n\n    if (node.children) {\n      node.toggled = toggled;\n    }\n\n    this.setState(() => ({\n      cursor: node,\n      data: Object.assign({}, data)\n    }));\n  }\n\n  async componentDidMount() {\n    const URL = '/api/regions';\n    const response = await fetch(URL); //console.log(response)\n\n    const data = await response.json();\n    const formatedData = data.sort(this.changeData); //console.log(formatedData.length)\n\n    this.setState({\n      data: formatedData\n    });\n  }\n\n  changeData(a, b) {\n    if (a.path < b.path) {\n      return -1;\n    }\n\n    if (a.path > b.path) {\n      return 1;\n    }\n\n    return 0;\n  }\n\n  render() {\n    const {\n      data\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Treebeard, {\n      data: data,\n      onToggle: this.onToggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport default Tree;\n/* \nconst serverData = [\n        { id: 1, path: '1', name: 'Region A' },\n        { id: 2, path: '2', name: 'Region B' },\n        { id: 3, path: '1.3', name: 'Station 1' },\n        { id: 4, path: '1.3.4', name: 'Section 1' },\n        { id: 5, path: '1.3.5', name: 'Section 2' },\n        { id: 6, path: '2.6', name: 'Station 10' },\n      ];\nconst data = [\n            {name: 'Name 1',\n            children: [\n                {\n                    name: 'Name 2',\n                    children: [\n                        { name: 'Name 3' },\n                        { name: 'Name 4' }\n                    ]\n                }\n            ]\n        },\n        {\n            name: 'Name 5',\n            children: [\n                { name: 'Name 6' }\n            ]\n        }\n    ];\n\n\nfunction changeData (a, b) {\n        if ( a.path < b.path ){\n          return -1;\n        }\n        if ( a.path > b.path ){\n          return 1;\n        }\n        return 0;\n      }\n\n      function reGroupArray(arr, size) {\n   var newArr = []\n   for (var i = 0; i <= Math.ceil(arr.length / size); i++) {\n \n       var j = 0;\n       if (i !== 0) {\n           j = j + size;\n           size = size + size;\n       }\n \n       newArr[i] = arr.slice(j, size);\n \n   }\n \n   return newArr;\n}\nvar formatedData = serverData.sort(changeData)\nconsole.log(formatedData)\n mapedArray = formatedData.map(el => el.path.split(\".\")) \nfor (i=0; i <mapedArray.length; i++) {\nif (mapedArray[i].length == 1) {mapedArray[i].id = \"parent\"}\n  else if (mapedArray[i].length == 2) {mapedArray[i].id = \"child\"}\n  else  {mapedArray[i].id = \"grandchild\"}\n}\nconsole.log( mapedArray)\nconsole.log(serverData.length)\nconsole.log(data.length)  */","map":{"version":3,"sources":["/Users/bahdana/Desktop/react_dec/my-app/src/components/Tree.js"],"names":["React","PureComponent","Treebeard","data","name","children","grandchildren","Tree","constructor","props","state","onToggle","bind","node","toggled","cursor","setState","active","Object","assign","componentDidMount","URL","response","fetch","json","formatedData","sort","changeData","a","b","path","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,aAAf,QAAmC,OAAnC;AACA,SAAQC,SAAR,QAAwB,iBAAxB;AAEA,MAAMC,IAAI,GAAG,CACD;AAACC,EAAAA,IAAI,EAAE,QAAP;AACAC,EAAAA,QAAQ,EAAE,CACN;AACID,IAAAA,IAAI,EAAE,QADV;AAEIE,IAAAA,aAAa,EAAE,CACX;AAAEF,MAAAA,IAAI,EAAE;AAAR,KADW,EAEX;AAAEA,MAAAA,IAAI,EAAE;AAAR,KAFW;AAFnB,GADM;AADV,CADC,EAYL;AACIA,EAAAA,IAAI,EAAE,QADV;AAEIC,EAAAA,QAAQ,EAAE,CACN;AAAED,IAAAA,IAAI,EAAE;AAAR,GADM;AAFd,CAZK,CAAb;AAqBA,OAAO,MAAMG,IAAN,SAAmBN,aAAnB,CAAiC;AACpCO,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAACP,MAAAA;AAAD,KAAb;AACA,SAAKQ,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACH;;AAEDD,EAAAA,QAAQ,CAACE,IAAD,EAAOC,OAAP,EAAe;AACnB,UAAM;AAACC,MAAAA,MAAD;AAASZ,MAAAA;AAAT,QAAiB,KAAKO,KAA5B;;AACA,QAAIK,MAAJ,EAAY;AACR,WAAKC,QAAL,CAAc,OAAO;AAACD,QAAAA,MAAD;AAASE,QAAAA,MAAM,EAAE;AAAjB,OAAP,CAAd;AACH;;AACDJ,IAAAA,IAAI,CAACI,MAAL,GAAc,IAAd;;AACA,QAAIJ,IAAI,CAACR,QAAT,EAAmB;AACfQ,MAAAA,IAAI,CAACC,OAAL,GAAeA,OAAf;AACH;;AACD,SAAKE,QAAL,CAAc,OAAO;AAACD,MAAAA,MAAM,EAAEF,IAAT;AAAeV,MAAAA,IAAI,EAAEe,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBhB,IAAlB;AAArB,KAAP,CAAd;AACH;;AACD,QAAMiB,iBAAN,GAA0B;AACtB,UAAMC,GAAG,GAAG,cAAZ;AACA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B,CAFsB,CAGtB;;AACA,UAAMlB,IAAI,GAAG,MAAMmB,QAAQ,CAACE,IAAT,EAAnB;AACA,UAAMC,YAAY,GAAGtB,IAAI,CAACuB,IAAL,CAAU,KAAKC,UAAf,CAArB,CALsB,CAMtB;;AACA,SAAKX,QAAL,CAAc;AAACb,MAAAA,IAAI,EAACsB;AAAN,KAAd;AACH;;AAEDE,EAAAA,UAAU,CAAEC,CAAF,EAAKC,CAAL,EAAQ;AACd,QAAKD,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAhB,EAAsB;AACpB,aAAO,CAAC,CAAR;AACD;;AACD,QAAKF,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAhB,EAAsB;AACpB,aAAO,CAAP;AACD;;AACD,WAAO,CAAP;AACD;;AAEHC,EAAAA,MAAM,GAAE;AACJ,UAAM;AAAC5B,MAAAA;AAAD,QAAS,KAAKO,KAApB;AACA,wBACI,QAAC,SAAD;AACI,MAAA,IAAI,EAAEP,IADV;AAEI,MAAA,QAAQ,EAAE,KAAKQ;AAFnB;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AA9CmC;AAgDxC,eAAeJ,IAAf;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, {PureComponent} from 'react';\nimport {Treebeard} from 'react-treebeard';\n\nconst data = [\n            {name: 'Name 1',\n            children: [\n                {\n                    name: 'Name 2',\n                    grandchildren: [\n                        { name: 'Name 3' },\n                        { name: 'Name 4' }\n                    ]\n                }\n            ]\n        },\n        {\n            name: 'Name 5',\n            children: [\n                { name: 'Name 6' }\n            ]\n        }\n    ];\n\n\nexport class Tree extends PureComponent {\n    constructor(props){\n        super(props);\n        this.state = {data};\n        this.onToggle = this.onToggle.bind(this);\n    }\n    \n    onToggle(node, toggled){\n        const {cursor, data} = this.state;\n        if (cursor) {\n            this.setState(() => ({cursor, active: false}));\n        }\n        node.active = true;\n        if (node.children) { \n            node.toggled = toggled; \n        }\n        this.setState(() => ({cursor: node, data: Object.assign({}, data)}));\n    }\n    async componentDidMount() {\n        const URL = '/api/regions'; \n        const response = await fetch(URL);\n        //console.log(response)\n        const data = await response.json()\n        const formatedData = data.sort(this.changeData)\n        //console.log(formatedData.length)\n        this.setState({data:formatedData})\n    }\n\n    changeData (a, b) {\n        if ( a.path < b.path ){\n          return -1;\n        }\n        if ( a.path > b.path ){\n          return 1;\n        }\n        return 0;\n      }\n\n    render(){\n        const {data} = this.state;\n        return (\n            <Treebeard\n                data={data}\n                onToggle={this.onToggle}\n            />\n        );\n    }\n}\nexport default Tree\n\n\n/* \nconst serverData = [\n        { id: 1, path: '1', name: 'Region A' },\n        { id: 2, path: '2', name: 'Region B' },\n        { id: 3, path: '1.3', name: 'Station 1' },\n        { id: 4, path: '1.3.4', name: 'Section 1' },\n        { id: 5, path: '1.3.5', name: 'Section 2' },\n        { id: 6, path: '2.6', name: 'Station 10' },\n      ];\nconst data = [\n            {name: 'Name 1',\n            children: [\n                {\n                    name: 'Name 2',\n                    children: [\n                        { name: 'Name 3' },\n                        { name: 'Name 4' }\n                    ]\n                }\n            ]\n        },\n        {\n            name: 'Name 5',\n            children: [\n                { name: 'Name 6' }\n            ]\n        }\n    ];\n\n\nfunction changeData (a, b) {\n        if ( a.path < b.path ){\n          return -1;\n        }\n        if ( a.path > b.path ){\n          return 1;\n        }\n        return 0;\n      }\n\n      function reGroupArray(arr, size) {\n   var newArr = []\n   for (var i = 0; i <= Math.ceil(arr.length / size); i++) {\n \n       var j = 0;\n       if (i !== 0) {\n           j = j + size;\n           size = size + size;\n       }\n \n       newArr[i] = arr.slice(j, size);\n \n   }\n \n   return newArr;\n}\nvar formatedData = serverData.sort(changeData)\nconsole.log(formatedData)\n mapedArray = formatedData.map(el => el.path.split(\".\")) \nfor (i=0; i <mapedArray.length; i++) {\nif (mapedArray[i].length == 1) {mapedArray[i].id = \"parent\"}\n  else if (mapedArray[i].length == 2) {mapedArray[i].id = \"child\"}\n  else  {mapedArray[i].id = \"grandchild\"}\n}\nconsole.log( mapedArray)\nconsole.log(serverData.length)\nconsole.log(data.length)  */"]},"metadata":{},"sourceType":"module"}